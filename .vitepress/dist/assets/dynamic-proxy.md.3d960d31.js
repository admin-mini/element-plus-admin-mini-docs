import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.590dd546.js";const h=JSON.parse('{"title":"vite-plugins-dynamic-proxy","description":"","frontmatter":{},"headers":[],"relativePath":"dynamic-proxy.md","filePath":"dynamic-proxy.md"}'),l={name:"dynamic-proxy.md"},o=p(`<h1 id="vite-plugins-dynamic-proxy" tabindex="-1">vite-plugins-dynamic-proxy <a class="header-anchor" href="#vite-plugins-dynamic-proxy" aria-label="Permalink to &quot;vite-plugins-dynamic-proxy&quot;">​</a></h1><p>当在开发阶段使用Vite构建前端应用时，有时需要与多个后端服务器进行交互。</p><blockquote><p>例如：mock环境、测试环境、生产环境</p></blockquote><p>为了简化这一过程，我们创建了一个名为&quot;<a href="https://github.com/zjpzjp/vite-plugin-debug-proxy" target="_blank" rel="noreferrer">Vite动态反向代理插件</a>&quot;的工具。 这个插件可以根据URL上的参数（?debug=URL）动态设置反向代理， 能够轻松地在不同的开发和测试环境中切换，而无需手动更改代理设置。</p><h2 id="功能特点" tabindex="-1">功能特点 <a class="header-anchor" href="#功能特点" aria-label="Permalink to &quot;功能特点&quot;">​</a></h2><ul><li><strong>动态代理配置</strong>：根据URL上的参数自动配置反向代理，无需手动更改Vite配置文件。</li><li><strong>简单易用</strong>：只需安装插件并提供所需的参数，即可轻松集成到您的Vite项目中。</li><li><strong>灵活性</strong>：支持在开发阶段灵活切换代理目标，以适应不同的测试环境。</li></ul><h2 id="如何使用" tabindex="-1">如何使用 <a class="header-anchor" href="#如何使用" aria-label="Permalink to &quot;如何使用&quot;">​</a></h2><ol><li><p>在Vite配置文件中使用插件：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// vite.config.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> dynamicProxy </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./vite.dynamic.proxy&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...其他配置</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">dynamicProxy</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        path:</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RegExp</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;^/api&quot;</span><span style="color:#E1E4E8;">)</span><span style="color:#6A737D;">//使用正则</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//path:&quot;/api&quot; //使用字符串路径</span></span>
<span class="line"><span style="color:#E1E4E8;">    }),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// vite.config.js</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> dynamicProxy </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./vite.dynamic.proxy&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...其他配置</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  plugins: [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">dynamicProxy</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        path:</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegExp</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;^/api&quot;</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">//使用正则</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//path:&quot;/api&quot; //使用字符串路径</span></span>
<span class="line"><span style="color:#24292E;">    }),</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div></li><li><p>通过/src/Debug.vue配置快速访问</p></li><li><p>通过页面右下角⚙ 快速访问你配置好的动态代理（打包时自动删除） 访问您的应用程序时，可以通过URL参数自动设置代理目标，例如：</p></li><li><p>说明</p><ul><li><code> 例如：http://localhost:3000?debug=https://192.168.1.123:8080/</code> 表示将所有<a href="http://localhost:3000/api/" target="_blank" rel="noreferrer">http://localhost:3000/api/</a>* 代理到 <a href="https://192.168.1.123:8080/" target="_blank" rel="noreferrer">https://192.168.1.123:8080/</a>*</li></ul></li></ol>`,8),e=[o];function t(c,r,i,y,E,d){return a(),n("div",null,e)}const g=s(l,[["render",t]]);export{h as __pageData,g as default};
